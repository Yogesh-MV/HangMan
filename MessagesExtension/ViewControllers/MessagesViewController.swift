//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Yogesh Murugesh on 10/10/16.
//  Copyright Â© 2016 Mallow Technologies Private Limited. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, StartGameViewControllerDelegate, CreateGameViewControllerDelegate, AnswerViewControllerDelegate {
    
    // MARK: - View Life Cycle

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        
        NotificationCenter.default.addObserver(self, selector: #selector(updateMessageDetails(message:)), name: NSNotification.Name(rawValue: "updateMessage"), object: nil)

        presentView(forconversation: conversation, withStyle: presentationStyle, fromStartGame: false)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        if presentationStyle == .expanded {
            presentView(forconversation: activeConversation!, withStyle: presentationStyle, fromStartGame: true)
        } else {
            presentView(forconversation: activeConversation!, withStyle: presentationStyle, fromStartGame: false)
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    
    // MARK: - Custom Methods
    
    @objc private func updateMessageDetails(message: NSNotification) {
        let details = message.object as! URLComponents
        activeConversation?.selectedMessage?.url = details.url
    }
    
    private func presentView(forconversation: MSConversation, withStyle: MSMessagesAppPresentationStyle, fromStartGame: Bool) {
        // Determine the controller to present.
        var controller: UIViewController = UIViewController()
        if forconversation.selectedMessage == nil && !fromStartGame && withStyle != .expanded {
            controller = instantiateStartGameView()!
        } else if forconversation.selectedMessage == nil && ( fromStartGame || withStyle == .expanded ){
            controller = instantiateCreateGameView()!
        } else if forconversation.selectedMessage != nil {
            let hangMessage = HangMessage(forconversation)
            if hangMessage.isGameFinished {
                if hangMessage.winnerUUID == forconversation.localParticipantIdentifier.uuidString {
                    controller = instantiateSuccessView(hangMessage)!
                } else {
                    controller = instantiateFailureView(hangMessage)!
                }
            } else if hangMessage.senderUUID != forconversation.localParticipantIdentifier.uuidString {
                controller = instantiateAnswerGameView(hangMessage)!
            } else {
                controller = instantiateWaitingView(hangMessage)!
            }
        }
        
        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        // Embed the new controller.
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)

    }
    
    private func instantiateCreateGameView() -> UIViewController? {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: CreateGameViewController.storyboardIdentifier) as? CreateGameViewController else { fatalError("Unable to instantiate an CreateGameViewController from the storyboard") }
        
        controller.delegate = self
        return controller

    }
    
    private func instantiateStartGameView() -> UIViewController? {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: StartGameViewController.storyboardIdentifier) as? StartGameViewController else { fatalError("Unable to instantiate an StartGameViewController from the storyboard") }
        
        controller.delegate = self
        return controller
        
    }
    
    private func instantiateAnswerGameView(_ hangMessage: HangMessage) -> UIViewController? {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: AnswerViewController.storyboardIdentifier) as? AnswerViewController else { fatalError("Unable to instantiate an AnswerViewController from the storyboard") }
        controller.delegate = self
        controller.selectedHangMessage = hangMessage
        return controller
        
    }
    
    private func instantiateSuccessView(_ hangMessage: HangMessage) -> UIViewController? {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: SuccessViewController.storyboardIdentifier) as? SuccessViewController else { fatalError("Unable to instantiate an SuccessViewController from the storyboard") }
        return controller
        
    }
    
    private func instantiateFailureView(_ hangMessage: HangMessage) -> UIViewController? {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: FailureViewController.storyboardIdentifier) as? FailureViewController else { fatalError("Unable to instantiate an FailureViewController from the storyboard") }
        return controller
        
    }
    
    private func instantiateWaitingView(_ hangMessage: HangMessage) -> UIViewController? {
        guard let controller = storyboard?.instantiateViewController(withIdentifier: WaitingViewController.storyboardIdentifier) as? WaitingViewController else { fatalError("Unable to instantiate an WaitingViewController from the storyboard") }
        return controller
        
    }


    
    private func startConversation(_ messageLayout: MSMessageTemplateLayout, _ originalWord: String?,  _ hangWord: String?, _ hintText: String?,  _ removedCharacters: [String]?, _ optionCount: Int? ) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        
        let components = HangMessage.constructComponents(originalWord, hangWord, hintText, removedCharacters, optionCount!, conversation.localParticipantIdentifier.uuidString)
        
        let message = MSMessage(session: conversation.selectedMessage?.session ?? MSSession())
        message.layout = messageLayout
        message.url = components.url!

        
        // Add the message to the conversation.
        conversation.insert(message) { error in
            if let error = error {
                print(error)
            }
        }
        
        dismiss()

    }
    
    // MARK: - StartGameViewController Delegate Methods

    func startGame(_ controller: StartGameViewController) {
        self.requestPresentationStyle(.expanded)
    }
    
    
    // MARK: - CreateGameViewController Delegate Methods
    
    func startConversation(_ controller: CreateGameViewController, _ messageLayout: MSMessageTemplateLayout, _ originalWord: String?, _ hangWord: String?,  _ hintText: String?, _ removedCharacters: [String]?, _ optionCount: Int?) {
        startConversation(messageLayout, originalWord, hangWord, hintText, removedCharacters, optionCount)

    }
    
    // MARK: - AnswerViewControllerDelegate Delegate Methods

    func showSuccessView(_ controller: AnswerViewController) {
        presentView(forconversation: activeConversation!, withStyle: .expanded, fromStartGame: false)
    }
    
    func showFailureView(_ controller: AnswerViewController) {
        presentView(forconversation: activeConversation!, withStyle: .expanded, fromStartGame: false)
    }

    
}
